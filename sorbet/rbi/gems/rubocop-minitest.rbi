# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/rubocop-minitest/all/rubocop-minitest.rbi
#
# rubocop-minitest-0.9.0

module RuboCop
end
module RuboCop::Minitest
end
module RuboCop::Minitest::Inject
  def self.defaults!; end
end
module RuboCop::Cop
end
module RuboCop::Cop::ArgumentRangeHelper
  def first_and_second_arguments_range(node); end
  def first_argument_range(node); end
  include RuboCop::Cop::RangeHelp
end
module RuboCop::Cop::MinitestCopRule
  def define_rule(assertion_method, target_method:, preferred_method: nil, inverse: nil); end
end
module RuboCop::Cop::Minitest
end
class RuboCop::Cop::Minitest::AssertEmpty < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertEmptyLiteral < RuboCop::Cop::Cop
  def assert_with_empty_literal(node = nil); end
  def on_send(node); end
end
class RuboCop::Cop::Minitest::AssertEqual < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertNil < RuboCop::Cop::Cop
  def assert_equal_with_nil(node = nil); end
  def autocorrect(node); end
  def on_send(node); end
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertIncludes < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertInstanceOf < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertMatch < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertRespondTo < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::AssertTruthy < RuboCop::Cop::Cop
  def assert_equal_with_truthy(node = nil); end
  def autocorrect(node); end
  def on_send(node); end
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::GlobalExpectations < RuboCop::Cop::Cop
  def autocorrect(node); end
  def block_global_expectation?(node = nil); end
  def on_send(node); end
  def preferred_receiver(node); end
  def value_global_expectation?(node = nil); end
end
class RuboCop::Cop::Minitest::RefuteEmpty < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteFalse < RuboCop::Cop::Cop
  def assert_equal_with_false(node = nil); end
  def assert_with_bang_argument(node = nil); end
  def autocorrect(node); end
  def on_send(node); end
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteEqual < RuboCop::Cop::Cop
  def assert_not_equal(node = nil); end
  def autocorrect(node); end
  def on_send(node); end
  def original_usage(first_part, custom_message); end
  def preferred_usage(first_arg, second_arg, custom_message = nil); end
  def process_not_equal(node); end
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteNil < RuboCop::Cop::Cop
  def autocorrect(node); end
  def on_send(node); end
  def refute_equal_with_nil(node = nil); end
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteIncludes < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteMatch < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteInstanceOf < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
class RuboCop::Cop::Minitest::RefuteRespondTo < RuboCop::Cop::Cop
  def autocorrect(node); end
  def correct_receiver(receiver); end
  def enclosed_in_redundant_parentheses?(node); end
  def new_arguments(arguments); end
  def offense_message(arguments); end
  def on_send(node); end
  def peel_redundant_parentheses_from(arguments); end
  extend RuboCop::Cop::MinitestCopRule
  include RuboCop::Cop::ArgumentRangeHelper
end
