# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/pronto/all/pronto.rbi
#
# pronto-0.10.0

module Pronto
  def self.run(commit = nil, repo_path = nil, formatters = nil, file = nil); end
end
class Pronto::Error < StandardError
end
class Pronto::GemNames
  def gems; end
  def to_a; end
end
class Pronto::Logger
  def initialize(out); end
  def log(*args); end
  def self.silent; end
end
class Pronto::ConfigFile
  def deep_merge(hash); end
  def initialize(path = nil); end
  def to_h; end
end
class Pronto::Config
  def bitbucket_api_endpoint; end
  def bitbucket_auto_approve; end
  def bitbucket_hostname; end
  def bitbucket_password; end
  def bitbucket_slug; end
  def bitbucket_username; end
  def bitbucket_web_endpoint; end
  def consolidate_comments?; end
  def excluded_files(runner); end
  def github_access_token; end
  def github_api_endpoint; end
  def github_hostname; end
  def github_slug; end
  def github_web_endpoint; end
  def gitlab_api_endpoint; end
  def gitlab_api_private_token; end
  def gitlab_slug; end
  def initialize(config_hash = nil); end
  def logger; end
  def max_warnings; end
  def message_format(formatter); end
end
class BitbucketClient
  def approve_pull_request(slug, pull_id); end
  def commit_comments(slug, sha); end
  def create_commit_comment(slug, sha, body, path, position); end
  def create_pull_comment(slug, pull_id, body, path, position); end
  def get(url); end
  def initialize(username, password); end
  def openstruct(response); end
  def post(url, body, path, position); end
  def pull_comments(slug, pull_id); end
  def pull_request_api(slug); end
  def pull_requests(slug); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def unapprove_pull_request(slug, pull_id); end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
class BitbucketServerClient
  def create_pull_comment(slug, pull_id, body, path, position); end
  def get(url, query); end
  def initialize(username, password, endpoint); end
  def openstruct(response); end
  def paged_request(url, query = nil); end
  def post(url, body, path, position); end
  def pull_comments(slug, pull_id); end
  def pull_requests(slug); end
  def pull_requests_url(slug); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
module Pronto::Git
end
class Pronto::Git::Repository
  def blame(path, lineno); end
  def branch; end
  def commits_until(sha); end
  def diff(commit, options = nil); end
  def empty_patches(sha); end
  def head; end
  def head_commit_sha; end
  def head_detached?; end
  def initialize(path); end
  def merge_base(commit); end
  def new_file?(path); end
  def path; end
  def remote_urls; end
  def show_commit(sha); end
end
class Pronto::Git::Patches
  def commit; end
  def each(&block); end
  def find_line(path, line); end
  def initialize(repo, commit, patches); end
  def reject(&block); end
  def repo; end
  include Enumerable
end
class Pronto::Git::Patch < Struct
  def added_lines; end
  def additions; end
  def blame(lineno); end
  def deleted_lines; end
  def deletions; end
  def delta(*args, &block); end
  def hunks(*args, &block); end
  def lines; end
  def new_file_full_path; end
  def new_file_path; end
  def patch; end
  def patch=(_); end
  def repo; end
  def repo=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def stat(*args, &block); end
  extend Forwardable
end
class Pronto::Git::Line < Struct
  def ==(other); end
  def addition?(*args, &block); end
  def blame; end
  def commit_line; end
  def commit_sha; end
  def content(*args, &block); end
  def deletion?(*args, &block); end
  def hunk; end
  def hunk=(_); end
  def line; end
  def line=(_); end
  def line_origin(*args, &block); end
  def new_lineno(*args, &block); end
  def old_lineno(*args, &block); end
  def patch; end
  def patch=(_); end
  def position; end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  extend Forwardable
end
module Pronto::Plugin
  def self.included(klass); end
end
module Pronto::Plugin::ClassMethods
  def inherited(klass); end
  def repository; end
end
class Pronto::Message
  def ==(other); end
  def commit_sha; end
  def comparison_attributes; end
  def eql?(other); end
  def full_path; end
  def hash; end
  def initialize(path, line, level, msg, commit_sha = nil, runner = nil); end
  def level; end
  def line; end
  def msg; end
  def path; end
  def repo; end
  def runner; end
  def to_h; end
end
class Pronto::Comment < Struct
  def ==(other); end
  def body; end
  def body=(_); end
  def path; end
  def path=(_); end
  def position; end
  def position=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def sha; end
  def sha=(_); end
  def to_s; end
end
class Pronto::Status < Struct
  def ==(other); end
  def context; end
  def context=(_); end
  def description; end
  def description=(_); end
  def self.[](*arg0); end
  def self.inspect; end
  def self.members; end
  def self.new(*arg0); end
  def sha; end
  def sha=(_); end
  def state; end
  def state=(_); end
  def to_s; end
end
class Pronto::Runner
  def initialize(patches, commit = nil); end
  def rake_file?(path); end
  def rb_file?(path); end
  def repo_path; end
  def ruby_executable?(path); end
  def ruby_file?(path); end
  def ruby_patches; end
  def self.runners; end
  def self.title; end
  extend Pronto::Plugin::ClassMethods
  include Pronto::Plugin
end
class Pronto::Runners
  def exceeds_max?(warnings); end
  def initialize(runners = nil, config = nil); end
  def reject_excluded(excluded_files, patches); end
  def run(patches); end
end
class Pronto::Client
  def env_pull_id; end
  def initialize(repo); end
end
class Pronto::GithubPull
  def initialize(client, slug); end
  def pull_by_branch(branch); end
  def pull_by_commit(sha); end
  def pull_by_id(pull_id); end
  def pull_requests; end
end
class Pronto::Github < Pronto::Client
  def client; end
  def commit_comments(sha); end
  def create_commit_comment(comment); end
  def create_commit_status(status); end
  def create_pull_comment(comment); end
  def create_pull_request_review(comments); end
  def initialize(repo); end
  def pull; end
  def pull_comments(sha); end
  def pull_id; end
  def pull_sha; end
  def slug; end
end
class Pronto::Gitlab < Pronto::Client
  def client; end
  def commit_comments(sha); end
  def create_commit_comment(comment); end
  def gitlab_api_endpoint; end
  def gitlab_api_private_token; end
  def host; end
  def slug; end
  def slug_regex(url); end
end
class Pronto::Bitbucket < Pronto::Client
  def approve_pull_request; end
  def client; end
  def commit_comments(sha); end
  def create_commit_comment(comment); end
  def create_pull_comment(comment); end
  def pull; end
  def pull_comments(sha); end
  def pull_id; end
  def pull_requests; end
  def slug; end
  def unapprove_pull_request; end
end
class Pronto::BitbucketServer < Pronto::Bitbucket
  def client; end
  def pull; end
  def pull_comments(sha); end
end
module Pronto::Formatter
  def self.get(names); end
  def self.names; end
end
module Pronto::Formatter::Colorizable
  def colorize(string, color); end
  def rainbow; end
end
class Pronto::Formatter::Base
  def config; end
  def self.name; end
end
class Pronto::Formatter::TextMessageDecorator < SimpleDelegator
  def format_level(message); end
  def format_location(message); end
  def to_h; end
  include Pronto::Formatter::Colorizable
end
class Pronto::Formatter::TextFormatter < Pronto::Formatter::Base
  def format(messages, _, _); end
end
class Pronto::Formatter::JsonFormatter < Pronto::Formatter::Base
  def format(messages, _, _); end
end
class Pronto::Formatter::GitFormatter < Pronto::Formatter::Base
  def client_module; end
  def consolidate_comments(comments); end
  def dedupe_comments(existing, comments); end
  def existing_comments(*arg0); end
  def format(messages, repo, patches); end
  def grouped_comments(comments); end
  def join_comments(comments); end
  def line_number(*arg0); end
  def new_comment(message, patches); end
  def new_comments(messages, patches); end
  def pretty_name; end
  def remove_duplicate_comments(old_comments, new_comments); end
  def submit_comments(*arg0); end
end
class Pronto::Formatter::CommitFormatter < Pronto::Formatter::GitFormatter
  def existing_comments(messages, client, _); end
  def submit_comments(client, comments); end
end
class Pronto::Formatter::PullRequestFormatter < Pronto::Formatter::GitFormatter
  def existing_comments(_, client, repo); end
  def submit_comments(client, comments); end
end
class Pronto::Formatter::GithubFormatter < Pronto::Formatter::CommitFormatter
  def client_module; end
  def line_number(message, _); end
  def pretty_name; end
end
class Pronto::Formatter::GithubStatusFormatter
  def create_status(client, sha, runner, messages); end
  def format(messages, repo, _); end
end
class Pronto::Formatter::GithubStatusFormatter::Sentence
  def initialize(words); end
  def to_oxford_comma_sentence; end
  def to_s; end
  def words; end
end
class Pronto::Formatter::GithubStatusFormatter::StatusBuilder
  def context; end
  def count_issue_types; end
  def description; end
  def failure?; end
  def failure_message?(message); end
  def initialize(runner, messages); end
  def map_description; end
  def message_state(message); end
  def order_by_severity(counts); end
  def pluralize(count, word); end
  def state; end
end
class Pronto::Formatter::GithubPullRequestFormatter < Pronto::Formatter::PullRequestFormatter
  def client_module; end
  def line_number(message, patches); end
  def pretty_name; end
end
class Pronto::Formatter::GithubPullRequestReviewFormatter < Pronto::Formatter::PullRequestFormatter
  def client_module; end
  def line_number(message, patches); end
  def pretty_name; end
  def submit_comments(client, comments); end
end
class Pronto::Formatter::GitlabFormatter < Pronto::Formatter::CommitFormatter
  def client_module; end
  def line_number(message, _); end
  def pretty_name; end
end
class Pronto::Formatter::BitbucketFormatter < Pronto::Formatter::CommitFormatter
  def client_module; end
  def line_number(message, _); end
  def pretty_name; end
end
class Pronto::Formatter::BitbucketPullRequestFormatter < Pronto::Formatter::PullRequestFormatter
  def approve_pull_request(comments_count, additions_count, client); end
  def client_module; end
  def line_number(message, _); end
  def pretty_name; end
end
class Pronto::Formatter::BitbucketServerPullRequestFormatter < Pronto::Formatter::PullRequestFormatter
  def client_module; end
  def line_number(message, _); end
  def pretty_name; end
end
class Pronto::Formatter::CheckstyleFormatter < Pronto::Formatter::Base
  def add_file_messages(path_messages, file); end
  def close_xml; end
  def format(messages, _, _); end
  def initialize; end
  def open_xml; end
  def process_messages(messages); end
  def to_checkstyle_severity(pronto_level); end
end
class Pronto::Formatter::NullFormatter < Pronto::Formatter::Base
  def format(_, _, _); end
end
