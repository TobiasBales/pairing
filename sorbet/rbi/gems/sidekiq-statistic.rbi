# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/sidekiq-statistic/all/sidekiq-statistic.rbi
#
# sidekiq-statistic-1.4.0

module Sidekiq
end
module Sidekiq::Statistic
  def self.configuration; end
  def self.configuration=(arg0); end
  def self.configure; end
end
class Sidekiq::Statistic::Configuration
  def initialize; end
  def last_log_lines; end
  def last_log_lines=(arg0); end
  def log_file; end
  def log_file=(arg0); end
  def max_timelist_length; end
  def max_timelist_length=(arg0); end
end
class Sidekiq::Statistic::LogParser
  def color(line); end
  def initialize(worker_name); end
  def jid_style(worker_jid); end
  def jid_tag(jid); end
  def jid_tag_regexp; end
  def last_log_lines; end
  def log_file; end
  def parse; end
  def sub_line(line); end
  def worker_info_regexp; end
end
class Sidekiq::Statistic::Middleware
  def call(worker, msg, queue); end
  def msg; end
  def msg=(arg0); end
  def save_entry_for_worker(worker_status); end
end
class Sidekiq::Statistic::Base
  def desired_dates; end
  def get_statistic_hash(conn, redis_hash); end
  def initialize(days_previous, start_date = nil); end
  def key_or_empty_hash; end
  def result_hash(redis_hash, key); end
  def statistic_for(worker); end
  def statistic_hash; end
  def time_hash(timeslist, worker_key); end
  def time_statistics(timeslist); end
  def to_number(value); end
  def update_hash_statments(hash); end
  def update_time_values(conn, redis_hash); end
  def worker_names; end
end
class Sidekiq::Statistic::Charts < Sidekiq::Statistic::Base
  def dates; end
  def information_for(type); end
end
class Sidekiq::Statistic::Realtime < Sidekiq::Statistic::Base
  def axis_array; end
  def columns_for(status, params = nil); end
  def initialize; end
  def realtime; end
  def realtime_hash; end
  def self.charts_initializer; end
  def statistic(params = nil); end
end
class Sidekiq::Statistic::Runtime
  def average_runtime; end
  def initialize(redis_statistic, worker, values = nil); end
  def last_runtime; end
  def max_runtime; end
  def min_runtime; end
  def total_runtime; end
  def values(key); end
  def values_hash; end
end
class Sidekiq::Statistic::Workers < Sidekiq::Statistic::Base
  def display; end
  def display_per_day(worker_name); end
  def last_job_status_for(worker); end
  def last_queue(worker); end
  def number_of_calls(worker); end
  def number_of_calls_for(state, worker); end
  def runtime_for_day(worker_name, worker_data); end
  def runtime_statistic(worker, values = nil); end
end
module Sidekiq::Statistic::WebExtension
  def self.registered(app); end
end
module Sidekiq::Statistic::WebApiExtension
  def self.registered(app); end
end
module Sidekiq::Statistic::WebExtensionHelper
  def calculate_date_range(params); end
  def convert_to_date_object(date); end
  def date_format(format = nil); end
  def format_date(date_to_format, format = nil); end
end
module Sidekiq::Statistic::Helpers
end
class Sidekiq::Statistic::Helpers::Color
  def self.for(worker_name, format = nil); end
  def self.to_hex(rgb); end
end
class Sidekiq::WebAction
  include Sidekiq::Statistic::WebExtensionHelper
  include Sidekiq::Statistic::WebExtensionHelper
end
