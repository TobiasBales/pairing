# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: true
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/code_analyzer/all/code_analyzer.rbi
#
# code_analyzer-0.5.2

module CodeAnalyzer
end
class CodeAnalyzer::Nil
  def array_size; end
  def blank?; end
  def hash_size; end
  def method_missing(method_sym, *arguments, &block); end
  def present?; end
  def to_s; end
end
class Sexp < Array
  def all; end
  def all_conditions; end
  def argument; end
  def arguments; end
  def array_size; end
  def array_values; end
  def base_class; end
  def blank?; end
  def block_node; end
  def body; end
  def check(visitor); end
  def children; end
  def class_name; end
  def conditional_statement; end
  def const?; end
  def exception_classes; end
  def exception_variable; end
  def grep_node(options); end
  def grep_nodes(options); end
  def grep_nodes_count(options); end
  def hash_keys; end
  def hash_size; end
  def hash_value(key); end
  def hash_values; end
  def left_value; end
  def line_number; end
  def message; end
  def method_name; end
  def module_name; end
  def new_method; end
  def old_method; end
  def origin_argument; end
  def origin_arguments; end
  def origin_base_class; end
  def origin_block_node; end
  def origin_body; end
  def origin_class_name; end
  def origin_conditional_statement; end
  def origin_left_value; end
  def origin_message; end
  def origin_method_name; end
  def origin_receiver; end
  def origin_right_value; end
  def origin_sexp_type; end
  def present?; end
  def receiver; end
  def recursive_children; end
  def remove_line_and_column; end
  def right_value; end
  def statements; end
  def to_object; end
end
class CodeAnalyzer::Checker
  def add_warning(message, filename = nil, line_number = nil); end
  def interesting_files; end
  def interesting_nodes; end
  def node_end(node); end
  def node_start(node); end
  def parse_file?(node_file); end
  def self.add_callback(*names, &block); end
  def self.callbacks; end
  def self.get_callbacks(name); end
  def self.interesting_files(*file_patterns); end
  def self.interesting_nodes(*nodes); end
  def warnings; end
end
class CodeAnalyzer::Warning
  def filename; end
  def initialize(options = nil); end
  def line_number; end
  def message; end
  def to_s; end
end
