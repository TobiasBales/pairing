# This file is autogenerated. Do not edit it by hand. Regenerate it with:
#   srb rbi gems

# typed: strict
#
# If you would like to make changes to this file, great! Please create the gem's shim here:
#
#   https://github.com/sorbet/sorbet-typed/new/master?filename=lib/gitlab/all/gitlab.rbi
#
# gitlab-4.16.0

module Gitlab
  def self.actions; end
  def self.client(options = nil); end
  def self.http_proxy(address = nil, port = nil, username = nil, password = nil); end
  def self.method_missing(method, *args, &block); end
  def self.respond_to_missing?(method_name, include_private = nil); end
  extend Gitlab::Configuration
end
class Gitlab::ObjectifiedHash
  def [](key); end
  def data; end
  def hash; end
  def initialize(hash); end
  def inspect; end
  def method_missing(method_name, *args, &block); end
  def respond_to_missing?(method_name, include_private = nil); end
  def to_h; end
  def to_hash; end
end
class Gitlab::CLI
end
module Gitlab::CLI::Helpers
  def actions; end
  def client; end
  def confirm_command(cmd); end
  def excluded_fields(args); end
  def filtered_fields(args, key); end
  def get_keys(args, data); end
  def gitlab_helper(cmd, args = nil); end
  def help(cmd = nil, &block); end
  def hex_color?(arg); end
  def method_owners; end
  def output_json(cmd, args, data); end
  def output_table(cmd, args, data); end
  def record_hash(data, cmd, args, single_value = nil); end
  def record_table(data, cmd, args); end
  def required_fields(args); end
  def self.actions; end
  def self.client; end
  def self.confirm_command(cmd); end
  def self.excluded_fields(args); end
  def self.filtered_fields(args, key); end
  def self.get_keys(args, data); end
  def self.gitlab_helper(cmd, args = nil); end
  def self.help(cmd = nil, &block); end
  def self.hex_color?(arg); end
  def self.method_owners; end
  def self.output_json(cmd, args, data); end
  def self.output_table(cmd, args, data); end
  def self.record_hash(data, cmd, args, single_value = nil); end
  def self.record_table(data, cmd, args); end
  def self.required_fields(args); end
  def self.symbolize_keys(hash); end
  def self.valid_command?(cmd); end
  def self.yaml_load(arg); end
  def symbolize_keys(hash); end
  def valid_command?(cmd); end
  def yaml_load(arg); end
end
module Gitlab::Configuration
  def auth_token=(arg0); end
  def configure; end
  def endpoint; end
  def endpoint=(arg0); end
  def get_httparty_config(options); end
  def httparty; end
  def httparty=(arg0); end
  def options; end
  def private_token; end
  def private_token=(arg0); end
  def reset; end
  def self.extended(base); end
  def sudo; end
  def sudo=(arg0); end
  def user_agent; end
  def user_agent=(arg0); end
end
module Gitlab::Error
end
class Gitlab::Error::Error < StandardError
end
class Gitlab::Error::MissingCredentials < Gitlab::Error::Error
end
class Gitlab::Error::Parsing < Gitlab::Error::Error
end
class Gitlab::Error::ResponseError < Gitlab::Error::Error
  def build_error_message; end
  def check_error_keys(resp); end
  def classified_response; end
  def handle_message(message); end
  def initialize(response); end
  def response_message; end
  def response_status; end
end
class Gitlab::Error::BadRequest < Gitlab::Error::ResponseError
end
class Gitlab::Error::Unauthorized < Gitlab::Error::ResponseError
end
class Gitlab::Error::Forbidden < Gitlab::Error::ResponseError
end
class Gitlab::Error::NotFound < Gitlab::Error::ResponseError
end
class Gitlab::Error::MethodNotAllowed < Gitlab::Error::ResponseError
end
class Gitlab::Error::NotAcceptable < Gitlab::Error::ResponseError
end
class Gitlab::Error::Conflict < Gitlab::Error::ResponseError
end
class Gitlab::Error::Unprocessable < Gitlab::Error::ResponseError
end
class Gitlab::Error::TooManyRequests < Gitlab::Error::ResponseError
end
class Gitlab::Error::InternalServerError < Gitlab::Error::ResponseError
end
class Gitlab::Error::BadGateway < Gitlab::Error::ResponseError
end
class Gitlab::Error::ServiceUnavailable < Gitlab::Error::ResponseError
end
class Gitlab::PageLinks
  def extract_links(header); end
  def first; end
  def first=(arg0); end
  def initialize(headers); end
  def last; end
  def last=(arg0); end
  def next; end
  def next=(arg0); end
  def prev; end
  def prev=(arg0); end
end
class Gitlab::PaginatedResponse
  def ==(other); end
  def auto_paginate(&block); end
  def client; end
  def client=(arg0); end
  def client_relative_path(link); end
  def each_page; end
  def first_page; end
  def first_page?; end
  def has_first_page?; end
  def has_last_page?; end
  def has_next_page?; end
  def has_prev_page?; end
  def initialize(array); end
  def inspect; end
  def last_page; end
  def last_page?; end
  def lazy_paginate; end
  def method_missing(name, *args, &block); end
  def next_page; end
  def next_page?; end
  def paginate_with_limit(limit, &block); end
  def parse_headers!(headers); end
  def prev_page; end
  def prev_page?; end
  def respond_to_missing?(method_name, include_private = nil); end
end
class Gitlab::FileResponse
  def empty?; end
  def filename; end
  def initialize(file); end
  def inspect; end
  def method_missing(name, *args, &block); end
  def parse_headers!(headers); end
  def respond_to_missing?(method_name, include_private = nil); end
  def to_h; end
  def to_hash; end
end
class Gitlab::Request
  def authorization_header; end
  def delete(path, options = nil); end
  def endpoint; end
  def endpoint=(arg0); end
  def get(path, options = nil); end
  def httparty_config(options); end
  def post(path, options = nil); end
  def private_token; end
  def private_token=(arg0); end
  def put(path, options = nil); end
  def request_defaults(sudo = nil); end
  def self.decode(response); end
  def self.default_cookies; end
  def self.default_cookies=(arg0); end
  def self.default_options; end
  def self.default_options=(arg0); end
  def self.parse(body); end
  def validate(response); end
  extend HTTParty::ClassMethods
  extend HTTParty::ModuleInheritableAttributes::ClassMethods
  include HTTParty
  include HTTParty::ModuleInheritableAttributes
end
class Gitlab::API < Gitlab::Request
  def auth_token=(arg0); end
  def endpoint; end
  def endpoint=(arg0); end
  def httparty; end
  def httparty=(arg0); end
  def initialize(options = nil); end
  def private_token; end
  def private_token=(arg0); end
  def self.default_cookies; end
  def self.default_options; end
  def sudo; end
  def sudo=(arg0); end
  def user_agent; end
  def user_agent=(arg0); end
end
class Gitlab::Client < Gitlab::API
  def inspect; end
  def only_show_last_four_chars(token); end
  def self.default_cookies; end
  def self.default_options; end
  def url_encode(url); end
  include Gitlab::Client::AccessRequests
  include Gitlab::Client::ApplicationSettings
  include Gitlab::Client::Avatar
  include Gitlab::Client::AwardEmojis
  include Gitlab::Client::Boards
  include Gitlab::Client::Branches
  include Gitlab::Client::BroadcastMessages
  include Gitlab::Client::BuildVariables
  include Gitlab::Client::Builds
  include Gitlab::Client::Commits
  include Gitlab::Client::ContainerRegistry
  include Gitlab::Client::Deployments
  include Gitlab::Client::Environments
  include Gitlab::Client::EpicIssues
  include Gitlab::Client::Epics
  include Gitlab::Client::Events
  include Gitlab::Client::Features
  include Gitlab::Client::GroupBoards
  include Gitlab::Client::GroupLabels
  include Gitlab::Client::GroupMilestones
  include Gitlab::Client::Groups
  include Gitlab::Client::IssueLinks
  include Gitlab::Client::Issues
  include Gitlab::Client::Jobs
  include Gitlab::Client::Keys
  include Gitlab::Client::Labels
  include Gitlab::Client::Lint
  include Gitlab::Client::Markdown
  include Gitlab::Client::MergeRequestApprovals
  include Gitlab::Client::MergeRequests
  include Gitlab::Client::Milestones
  include Gitlab::Client::Namespaces
  include Gitlab::Client::Notes
  include Gitlab::Client::PipelineSchedules
  include Gitlab::Client::PipelineTriggers
  include Gitlab::Client::Pipelines
  include Gitlab::Client::ProjectBadges
  include Gitlab::Client::ProjectClusters
  include Gitlab::Client::ProjectReleaseLinks
  include Gitlab::Client::ProjectReleases
  include Gitlab::Client::Projects
  include Gitlab::Client::ProtectedTags
  include Gitlab::Client::Repositories
  include Gitlab::Client::RepositoryFiles
  include Gitlab::Client::RepositorySubmodules
  include Gitlab::Client::ResourceLabelEvents
  include Gitlab::Client::Runners
  include Gitlab::Client::Search
  include Gitlab::Client::Services
  include Gitlab::Client::Sidekiq
  include Gitlab::Client::Snippets
  include Gitlab::Client::SystemHooks
  include Gitlab::Client::Tags
  include Gitlab::Client::Templates
  include Gitlab::Client::Todos
  include Gitlab::Client::UserSnippets
  include Gitlab::Client::Users
  include Gitlab::Client::Versions
  include Gitlab::Client::Wikis
end
module Gitlab::Client::Boards
  def board(project, id); end
  def board_list(project, board_id, id); end
  def board_lists(project, id); end
  def boards(project, options = nil); end
  def create_board(project, name); end
  def create_board_list(project, board_id, label_id); end
  def delete_board(project, id); end
  def delete_board_list(project, board_id, id); end
  def edit_board(project, id, options = nil); end
  def edit_board_list(project, board_id, id, position); end
end
module Gitlab::Client::Pipelines
  def cancel_pipeline(project, id); end
  def create_pipeline(project, ref, variables = nil); end
  def delete_pipeline(project, id); end
  def pipeline(project, id); end
  def pipelines(project, options = nil); end
  def retry_pipeline(project, id); end
end
module Gitlab::Client::GroupBoards
  def create_group_board(group, name); end
  def create_group_board_list(group, board_id, label_id); end
  def delete_group_board(group, id); end
  def delete_group_board_list(group, board_id, id); end
  def edit_group_board(group, id, options = nil); end
  def edit_group_board_list(group, board_id, id, options = nil); end
  def group_board(group, id); end
  def group_board_list(group, board_id, id); end
  def group_board_lists(group, board_id); end
  def group_boards(group); end
end
module Gitlab::Client::ApplicationSettings
  def application_settings; end
  def edit_application_settings(options = nil); end
end
module Gitlab::Client::Lint
  def validate_gitlab_ci_yml(content); end
end
module Gitlab::Client::PipelineSchedules
  def create_pipeline_schedule(project, options = nil); end
  def create_pipeline_schedule_variable(project, pipeline_schedule_id, options = nil); end
  def delete_pipeline_schedule(project, pipeline_schedule_id); end
  def delete_pipeline_schedule_variable(project, pipeline_schedule_id, key, _options = nil); end
  def edit_pipeline_schedule(project, pipeline_schedule_id, options = nil); end
  def edit_pipeline_schedule_variable(project, pipeline_schedule_id, key, options = nil); end
  def pipeline_schedule(project, id); end
  def pipeline_schedule_take_ownership(project, pipeline_schedule_id); end
  def pipeline_schedules(project, options = nil); end
end
module Gitlab::Client::ProjectBadges
  def add_project_badge(project, options = nil); end
  def edit_project_badge(project, badge_id, options = nil); end
  def preview_project_badge(project, link_url, image_url); end
  def project_badge(project, badge_id); end
  def project_badges(project); end
  def remove_project_badge(project, badge_id); end
end
module Gitlab::Client::Namespaces
  def namespaces(options = nil); end
end
module Gitlab::Client::Versions
  def version; end
end
module Gitlab::Client::Projects
  def add_project_hook(project, url, options = nil); end
  def add_push_rule(id, options = nil); end
  def add_team_member(project, id, access_level, options = nil); end
  def archive_project(id); end
  def create_deploy_key(project, title, key, options = nil); end
  def create_fork(id, options = nil); end
  def create_project(name, options = nil); end
  def delete_deploy_key(project, id); end
  def delete_project(id); end
  def delete_project_hook(project, id); end
  def delete_push_rule(id); end
  def deploy_key(project, id); end
  def deploy_keys(project, options = nil); end
  def disable_deploy_key(project, key); end
  def edit_deploy_key(project, id, title, options = nil); end
  def edit_project(id, options = nil); end
  def edit_project_hook(project, id, url, options = nil); end
  def edit_push_rule(id, options = nil); end
  def edit_team_member(project, id, access_level, options = nil); end
  def enable_deploy_key(project, key); end
  def make_forked_from(project, id); end
  def project(id); end
  def project_forks(id, options = nil); end
  def project_hook(project, id); end
  def project_hooks(project, options = nil); end
  def project_search(query, options = nil); end
  def project_template(project, type, key, options = nil); end
  def project_templates(project, type); end
  def projects(options = nil); end
  def push_rule(id); end
  def remove_forked(project); end
  def remove_team_member(project, id); end
  def search_projects(query, options = nil); end
  def share_project_with_group(project, id, group_access); end
  def star_project(id); end
  def team_member(project, id); end
  def team_members(project, options = nil); end
  def transfer_project(project, namespace); end
  def unarchive_project(id); end
  def unshare_project_with_group(project, id); end
  def unstar_project(id); end
  def upload_file(id, file_fullpath); end
  def user_projects(user_id, options = nil); end
end
module Gitlab::Client::MergeRequests
  def accept_merge_request(project, id, options = nil); end
  def create_merge_request(project, title, options = nil); end
  def create_merge_request_discussion(project, merge_request_id, options = nil); end
  def create_merge_request_discussion_note(project, merge_request_id, discussion_id, options); end
  def delete_merge_request_discussion_note(project, merge_request_id, discussion_id, note_id); end
  def merge_request(project, id, options = nil); end
  def merge_request_changes(project, id); end
  def merge_request_closes_issues(project_id, merge_request_iid); end
  def merge_request_commits(project, id); end
  def merge_request_diff_version(project, merge_request_id, version_id); end
  def merge_request_diff_versions(project, merge_request_id); end
  def merge_request_discussion(project, merge_request_id, discussion_id); end
  def merge_request_discussions(project, merge_request_id); end
  def merge_request_participants(project, id); end
  def merge_request_pipelines(project, id); end
  def merge_requests(project, options = nil); end
  def resolve_merge_request_discussion(project, merge_request_id, discussion_id, options); end
  def subscribe_to_merge_request(project, id); end
  def unsubscribe_from_merge_request(project, id); end
  def update_merge_request(project, id, options = nil); end
  def update_merge_request_discussion_note(project, merge_request_id, discussion_id, note_id, options); end
  def user_merge_requests(options = nil); end
end
module Gitlab::Client::Environments
  def create_environment(project, env_name, options = nil); end
  def delete_environment(project, id); end
  def edit_environment(project, id, options = nil); end
  def environment(project, id); end
  def environments(project, options = nil); end
  def stop_environment(project, id); end
end
module Gitlab::Client::Runners
  def all_runners(options = nil); end
  def delete_registered_runner(token); end
  def delete_runner(id); end
  def project_disable_runner(id, runner_id); end
  def project_enable_runner(project_id, id); end
  def project_runners(project_id); end
  def register_runner(token, options = nil); end
  def runner(id); end
  def runner_jobs(runner_id, options = nil); end
  def runners(options = nil); end
  def update_runner(id, options = nil); end
  def verify_auth_registered_runner(token); end
end
module Gitlab::Client::Markdown
  def markdown(text, options = nil); end
end
module Gitlab::Client::Search
  def search_globally(scope, search); end
  def search_in_group(group, scope, search); end
  def search_in_project(project, scope, search, ref = nil); end
end
module Gitlab::Client::AccessRequests
  def approve_group_access_request(group, user_id, options = nil); end
  def approve_project_access_request(project, user_id, options = nil); end
  def deny_group_access_request(group, user_id); end
  def deny_project_access_request(project, user_id); end
  def group_access_requests(group); end
  def project_access_requests(project); end
  def request_group_access(group); end
  def request_project_access(project); end
end
module Gitlab::Client::Snippets
  def create_snippet(project, options = nil); end
  def delete_snippet(project, id); end
  def edit_snippet(project, id, options = nil); end
  def snippet(project, id); end
  def snippet_content(project, id); end
  def snippets(project, options = nil); end
end
module Gitlab::Client::Repositories
  def compare(project, from, to); end
  def contributors(project, options = nil); end
  def merge_base(project, refs); end
  def repo_archive(project, ref = nil, format = nil); end
  def repo_compare(project, from, to); end
  def repo_contributors(project, options = nil); end
  def repo_tree(project, options = nil); end
  def tree(project, options = nil); end
end
module Gitlab::Client::Deployments
  def deployment(project, id); end
  def deployments(project, options = nil); end
end
module Gitlab::Client::Templates
  def dockerfile_template(key); end
  def dockerfile_templates; end
  def gitignore_template(key); end
  def gitignore_templates; end
  def gitlab_ci_yml_template(key); end
  def gitlab_ci_yml_templates; end
  def license_template(key, options = nil); end
  def license_templates(options = nil); end
end
module Gitlab::Client::Jobs
  def job(project_id, job_id); end
  def job_artifacts(project_id, job_id); end
  def job_artifacts_delete(project_id, job_id); end
  def job_artifacts_download(project_id, ref_name, job_name); end
  def job_artifacts_keep(project_id, job_id); end
  def job_cancel(project_id, job_id); end
  def job_erase(project_id, job_id); end
  def job_play(project_id, job_id); end
  def job_retry(project_id, job_id); end
  def job_trace(project_id, job_id); end
  def jobs(project_id, options = nil); end
  def pipeline_jobs(project_id, pipeline_id, options = nil); end
end
module Gitlab::Client::IssueLinks
  def create_issue_link(project, issue, target_project_id, target_issue_iid); end
  def delete_issue_link(project, issue, id); end
  def issue_links(project, issue, options = nil); end
end
module Gitlab::Client::RepositoryFiles
  def create_file(project, path, branch, content, commit_message, options = nil); end
  def edit_file(project, path, branch, content, commit_message, options = nil); end
  def encoded_content_attributes(content); end
  def file_contents(project, filepath, ref = nil); end
  def get_file(project, file_path, ref); end
  def get_file_blame(project, file_path, ref); end
  def remove_file(project, path, branch, commit_message, options = nil); end
  def repo_file_contents(project, filepath, ref = nil); end
end
module Gitlab::Client::ResourceLabelEvents
  def epic_label_event(group, epic_id, id); end
  def epic_label_events(group, epic_id); end
  def issue_label_event(project, issue_iid, id); end
  def issue_label_events(project, issue_iid); end
  def merge_request_label_event(project, merge_request_iid, id); end
  def merge_request_label_events(project, merge_request_iid); end
end
module Gitlab::Client::ContainerRegistry
  def bulk_delete_registry_repository_tags(project, repository_id, options = nil); end
  def delete_registry_repository(project, id); end
  def delete_registry_repository_tag(project, repository_id, tag_name); end
  def registry_repositories(project); end
  def registry_repository_tag(project, repository_id, tag_name); end
  def registry_repository_tags(project, repository_id); end
end
module Gitlab::Client::Sidekiq
  def sidekiq_compound_metrics; end
  def sidekiq_job_stats; end
  def sidekiq_process_metrics; end
  def sidekiq_queue_metrics; end
end
module Gitlab::Client::AwardEmojis
  def award_emoji(project, awardable_id, awardable_type, award_id); end
  def award_emojis(project, awardable_id, awardable_type); end
  def create_award_emoji(project, awardable_id, awardable_type, emoji_name); end
  def create_note_award_emoji(project, awardable_id, awardable_type, note_id, emoji_name); end
  def delete_award_emoji(project, awardable_id, awardable_type, award_id); end
  def delete_note_award_emoji(project, awardable_id, awardable_type, note_id, award_id); end
  def note_award_emoji(project, awardable_id, awardable_type, note_id, award_id); end
  def note_award_emojis(project, awardable_id, awardable_type, note_id); end
end
module Gitlab::Client::ProjectReleases
  def create_project_release(project, options = nil); end
  def delete_project_release(project, tag_name); end
  def project_release(project, tag_name); end
  def project_releases(project); end
  def update_project_release(project, tag_name, options = nil); end
end
module Gitlab::Client::Features
  def delete_feature(name); end
  def features; end
  def set_feature(name, value, options = nil); end
end
module Gitlab::Client::Keys
  def key(id); end
end
module Gitlab::Client::GroupMilestones
  def create_group_milestone(id, title, options = nil); end
  def edit_group_milestone(id, milestone_id, options = nil); end
  def group_milestone(id, milestone_id); end
  def group_milestone_issues(id, milestone_id, options = nil); end
  def group_milestone_merge_requests(id, milestone_id, options = nil); end
  def group_milestones(id, options = nil); end
end
module Gitlab::Client::Builds
  def build(project, id); end
  def build_artifacts(project, id); end
  def build_cancel(project, id); end
  def build_erase(project, id); end
  def build_retry(project, id); end
  def builds(project, options = nil); end
  def commit_builds(project, sha, options = nil); end
end
module Gitlab::Client::ProjectReleaseLinks
  def create_project_release_link(project, tag_name, options = nil); end
  def delete_project_release_link(project, tag_name, link_id); end
  def project_release_link(project, tag_name, link_id); end
  def project_release_links(project, tag_name); end
  def update_project_release_link(project, tag_name, link_id, options = nil); end
end
module Gitlab::Client::Avatar
  def avatar(options = nil); end
end
module Gitlab::Client::Notes
  def create_epic_note(group, epic, body); end
  def create_issue_note(project, issue, body); end
  def create_merge_request_comment(project, merge_request, body); end
  def create_merge_request_note(project, merge_request, body); end
  def create_note(project, body); end
  def create_snippet_note(project, snippet, body); end
  def delete_issue_note(project, issue, id); end
  def delete_merge_request_comment(project, merge_request, id); end
  def delete_merge_request_note(project, merge_request, id); end
  def delete_note(project, id); end
  def delete_snippet_note(project, snippet, id); end
  def edit_issue_note(project, issue, id, body); end
  def edit_merge_request_comment(project, merge_request, id, body); end
  def edit_merge_request_note(project, merge_request, id, body); end
  def edit_note(project, id, body); end
  def edit_snippet_note(project, snippet, id, body); end
  def epic_notes(group, epic, options = nil); end
  def issue_note(project, issue, id); end
  def issue_notes(project, issue, options = nil); end
  def merge_request_comments(project, merge_request, options = nil); end
  def merge_request_note(project, merge_request, id); end
  def merge_request_notes(project, merge_request, options = nil); end
  def note(project, id); end
  def note_content(body); end
  def notes(project, options = nil); end
  def snippet_note(project, snippet, id); end
  def snippet_notes(project, snippet, options = nil); end
end
module Gitlab::Client::Wikis
  def create_wiki(project, title, content, options = nil); end
  def delete_wiki(project, slug); end
  def update_wiki(project, slug, options = nil); end
  def wiki(project, slug); end
  def wikis(project, options = nil); end
end
module Gitlab::Client::Groups
  def add_group_member(team_id, user_id, access_level); end
  def add_ldap_group_links(id, commonname, group_access, provider); end
  def create_group(name, path, options = nil); end
  def delete_group(id); end
  def delete_ldap_group_links(id, commonname, provider); end
  def edit_group(id, options = nil); end
  def edit_group_member(team_id, user_id, access_level); end
  def group(id, options = nil); end
  def group_issues(group, options = nil); end
  def group_member(team_id, user_id); end
  def group_members(id, options = nil); end
  def group_merge_requests(group, options = nil); end
  def group_projects(id, options = nil); end
  def group_search(search, options = nil); end
  def group_subgroups(id, options = nil); end
  def groups(options = nil); end
  def remove_group_member(team_id, user_id); end
  def sync_ldap_group(id); end
  def transfer_project_to_group(id, project_id); end
end
module Gitlab::Client::BroadcastMessages
  def broadcast_message(id); end
  def broadcast_messages; end
  def create_broadcast_message(message, options = nil); end
  def delete_broadcast_message(id); end
  def edit_broadcast_message(id, options = nil); end
end
module Gitlab::Client::Events
  def events(options = nil); end
  def project_events(project, options = nil); end
  def user_events(user, options = nil); end
end
module Gitlab::Client::Milestones
  def create_milestone(project, title, options = nil); end
  def delete_milestone(project, id); end
  def edit_milestone(project, id, options = nil); end
  def milestone(project, id); end
  def milestone_issues(project, milestone, options = nil); end
  def milestone_merge_requests(project, milestone, options = nil); end
  def milestones(project, options = nil); end
end
module Gitlab::Client::BuildVariables
  def create_group_variable(group, key, value, **opts); end
  def create_variable(project, key, value, **opts); end
  def group_variable(group, key); end
  def group_variables(group); end
  def remove_group_variable(group, key); end
  def remove_variable(project, key); end
  def update_group_variable(group, key, value, **opts); end
  def update_variable(project, key, value, **opts); end
  def variable(project, key); end
  def variables(project); end
end
module Gitlab::Client::ProjectClusters
  def add_project_cluster(project, name, options = nil); end
  def delete_project_cluster(project, cluster_id); end
  def edit_project_cluster(project, cluster_id, options = nil); end
  def project_cluster(project, cluster_id); end
  def project_clusters(project); end
end
module Gitlab::Client::EpicIssues
  def epic_issues(group, epic, options = nil); end
end
module Gitlab::Client::ProtectedTags
  def protect_repository_tag(project, name, options = nil); end
  def protected_tag(project, name); end
  def protected_tags(project, options = nil); end
  def unprotect_repository_tag(project, name); end
end
module Gitlab::Client::Branches
  def branch(project, branch); end
  def branches(project, options = nil); end
  def create_branch(project, branch, ref); end
  def delete_branch(project, branch); end
  def delete_merged_branches(project); end
  def protect_branch(project, branch, options = nil); end
  def protected_branch(project, branch); end
  def protected_branches(project); end
  def repo_branch(project, branch); end
  def repo_branches(project, options = nil); end
  def repo_create_branch(project, branch, ref); end
  def repo_delete_branch(project, branch); end
  def repo_delete_merged_branches(project); end
  def repo_protect_branch(project, branch, options = nil); end
  def repo_protected_branch(project, branch); end
  def repo_protected_branches(project); end
  def repo_unprotect_branch(project, branch); end
  def unprotect_branch(project, branch); end
end
module Gitlab::Client::RepositorySubmodules
  def edit_submodule(project, submodule, options = nil); end
end
module Gitlab::Client::Epics
  def create_epic(group_id, title, options = nil); end
  def delete_epic(group_id, epic_iid); end
  def edit_epic(group_id, epic_iid, options = nil); end
  def epic(group_id, epic_iid, options = nil); end
  def epics(group_id, options = nil); end
end
module Gitlab::Client::Todos
  def mark_all_todos_as_done; end
  def mark_todo_as_done(id); end
  def todos(options = nil); end
end
module Gitlab::Client::Commits
  def cherry_pick_commit(project, sha, branch); end
  def commit(project, sha); end
  def commit_comments(project, commit, options = nil); end
  def commit_diff(project, sha); end
  def commit_merge_requests(project, commit, options = nil); end
  def commit_refs(project, sha, options = nil); end
  def commit_status(project, sha, options = nil); end
  def commits(project, options = nil); end
  def create_commit(project, branch, message, actions, options = nil); end
  def create_commit_comment(project, commit, note, options = nil); end
  def repo_commit(project, sha); end
  def repo_commit_comments(project, commit, options = nil); end
  def repo_commit_diff(project, sha); end
  def repo_commit_merge_requests(project, commit, options = nil); end
  def repo_commit_status(project, sha, options = nil); end
  def repo_commits(project, options = nil); end
  def repo_create_commit_comment(project, commit, note, options = nil); end
  def repo_update_commit_status(project, sha, state, options = nil); end
  def update_commit_status(project, sha, state, options = nil); end
end
module Gitlab::Client::Users
  def activities(options = nil); end
  def add_email(email, user_id = nil); end
  def block_user(user_id); end
  def create_ssh_key(title, key, options = nil); end
  def create_user(*args); end
  def delete_email(id, user_id = nil); end
  def delete_ssh_key(id, options = nil); end
  def delete_user(user_id); end
  def edit_user(user_id, options = nil); end
  def email(id); end
  def emails(user_id = nil); end
  def session(email, password); end
  def ssh_key(id); end
  def ssh_keys(options = nil); end
  def unblock_user(user_id); end
  def user(id = nil); end
  def user_search(search, options = nil); end
  def users(options = nil); end
end
module Gitlab::Client::Issues
  def add_time_spent_on_issue(project, id, duration); end
  def close_issue(project, id); end
  def create_issue(project, title, options = nil); end
  def delete_issue(project, id); end
  def edit_issue(project, id, options = nil); end
  def estimate_time_of_issue(project, id, duration); end
  def issue(project, id); end
  def issues(project = nil, options = nil); end
  def merge_requests_closing_issue_on_merge(project, id); end
  def move_issue(project, id, options = nil); end
  def participants_on_issue(project, id); end
  def reopen_issue(project, id); end
  def reset_time_estimate_of_issue(project, id); end
  def reset_time_spent_on_issue(project, id); end
  def subscribe_to_issue(project, id); end
  def time_stats_for_issue(project, id); end
  def unsubscribe_from_issue(project, id); end
end
module Gitlab::Client::Tags
  def create_release(project, tag, description); end
  def create_tag(project, tag_name, ref, message = nil, description = nil); end
  def delete_tag(project, tag); end
  def repo_create_release(project, tag, description); end
  def repo_create_tag(project, tag_name, ref, message = nil, description = nil); end
  def repo_delete_tag(project, tag); end
  def repo_tag(project, tag); end
  def repo_tags(project, options = nil); end
  def repo_update_release(project, tag, description); end
  def tag(project, tag); end
  def tags(project, options = nil); end
  def update_release(project, tag, description); end
end
module Gitlab::Client::SystemHooks
  def add_hook(url, options = nil); end
  def add_system_hook(url, options = nil); end
  def delete_hook(id); end
  def delete_system_hook(id); end
  def hook(id); end
  def hooks(options = nil); end
  def system_hook(id); end
  def system_hooks(options = nil); end
end
module Gitlab::Client::UserSnippets
  def create_user_snippet(options = nil); end
  def delete_user_snippet(id); end
  def edit_user_snippet(id, options = nil); end
  def public_snippets(options = nil); end
  def snippet_user_agent_details(id); end
  def user_snippet(id); end
  def user_snippet_raw(id); end
  def user_snippets; end
end
module Gitlab::Client::MergeRequestApprovals
  def approve_merge_request(project, merge_request, options = nil); end
  def create_project_merge_request_approval_rule(project, options = nil); end
  def delete_project_merge_request_approval_rule(project, approval_rule_id); end
  def edit_merge_request_approvals(project, merge_request, options = nil); end
  def edit_merge_request_approvers(project, merge_request, options = nil); end
  def edit_project_approvers(project, options = nil); end
  def edit_project_merge_request_approvals(project, options = nil); end
  def merge_request_approval_state(project, id); end
  def merge_request_approvals(project, merge_request); end
  def project_merge_request_approval_rules(project); end
  def project_merge_request_approvals(project); end
  def unapprove_merge_request(project, merge_request, options = nil); end
  def update_project_merge_request_approval_rule(project, approval_rule_id, options = nil); end
end
module Gitlab::Client::Services
  def change_service(project, service, params); end
  def correct_service_name(service); end
  def delete_service(project, service); end
  def service(project, service); end
end
module Gitlab::Client::GroupLabels
  def create_group_label(group, name, color, options = nil); end
  def delete_group_label(group, name); end
  def edit_group_label(group, name, options = nil); end
  def group_labels(group, options = nil); end
  def subscribe_to_group_label(group, name); end
  def unsubscribe_from_group_label(group, name); end
end
module Gitlab::Client::PipelineTriggers
  def create_trigger(project, description); end
  def delete_trigger(project, trigger_id); end
  def remove_trigger(project, trigger_id); end
  def run_trigger(project, token, ref, variables = nil); end
  def trigger(project, trigger_id); end
  def trigger_take_ownership(project, trigger_id); end
  def triggers(project); end
  def update_trigger(project, trigger_id, options = nil); end
end
module Gitlab::Client::Labels
  def create_label(project, name, color, options = nil); end
  def delete_label(project, name); end
  def edit_label(project, name, options = nil); end
  def labels(project, options = nil); end
  def subscribe_to_label(project, name); end
  def unsubscribe_from_label(project, name); end
end
